# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: dorny/test-reporter@v1
        with:

          # Name or regex of artifact containing test results
          # Regular expression must be enclosed in '/'.
          # Values from captured groups will replace occurrences of $N in report name.
          # Example:
          #   artifact: /test-results-(.*)/
          #   name: 'Test report $1'
          #   -> Artifact 'test-result-ubuntu' would create report 'Test report ubuntu'
          artifact: "junit.xml"

          # Name of the Check Run which will be created
          name: 'kubescape results'

          # Coma separated list of paths to test results
          # Supports wildcards via [fast-glob](https://github.com/mrmlnc/fast-glob)
          # All matched result files must be of the same format
          path: '.'

          # The fast-glob library that is internally used interprets backslashes as escape characters.
          # If enabled, all backslashes in provided path will be replaced by forward slashes and act as directory separators.
          # It might be useful when path input variable is composed dynamically from existing directory paths on Windows.
          path-replace-backslashes: 'false'

          # Format of test results. Supported options:
          #   dart-json
          #   dotnet-trx
          #   flutter-json
          #   java-junit
          #   jest-junit
          #   mocha-json
          reporter: 'java-junit'

          # Allows you to generate only the summary.
          # If enabled, the report will contain a table listing each test results file and the number of passed, failed, and skipped tests.
          # Detailed listing of test suites and test cases will be skipped.
          only-summary: 'false'

          # Limits which test suites are listed:
          #   all
          #   failed
          list-suites: 'all'

          # Limits which test cases are listed:
          #   all
          #   failed
          #   none
          list-tests: 'all'

          # Limits number of created annotations with error message and stack trace captured during test execution.
          # Must be less or equal to 50.
          max-annotations: '50'

          # Set action as failed if test report contains any failed test
          fail-on-error: 'true'
#       - name: JUnit Report Action
#         # You may pin to the exact commit or the version.
#         # uses: mikepenz/action-junit-report@127c778ac944abc0f48a5103964304bab7eb208b
#         uses: mikepenz/action-junit-report@v2.9.1
#         with:
#           report_paths: "*.xml"

          
