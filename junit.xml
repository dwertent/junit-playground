<testsuites errors="0" disabled="0" failures="43" tests="59" time="" name="Kubescape Scanning"><testsuite name="DevOpsBest" disabled="0" errors="0" failures="8" hostname="" id="0" skipped="" time="" timestamp="2022-03-03 09:35:56.095817332 +0000 UTC"><properties><property name="riskScore" value="36.84"></property></properties><testcase classname="DevOpsBest" status="failed" name="Label usage for resources" time=""><failure message="Remediation: Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0076" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner</failure></testcase><testcase classname="DevOpsBest" status="failed" name="Naked PODs" time=""><failure message="Remediation: Create necessary Deployment object for every POD making any POD a first class citizen in your IaC architecture.&#xA;More details: https://hub.armo.cloud/docs/c-0073" type="Control">apiVersion: v1; kind: Pod; name: storage-provisioner</failure></testcase><testcase classname="DevOpsBest" status="passed" name="Container hostPort" time=""></testcase><testcase classname="DevOpsBest" status="passed" name="Pods in default namespace" time=""></testcase><testcase classname="DevOpsBest" status="failed" name="Containers mounting Docker socket" time=""><failure message="Remediation: Remove docker socket mount request or define an exception.&#xA;More details: https://hub.armo.cloud/docs/c-0074" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook</failure></testcase><testcase classname="DevOpsBest" status="failed" name="Configured readiness probe" time=""><failure message="Remediation: Ensure Readiness probes are configured wherever possible.&#xA;More details: https://hub.armo.cloud/docs/c-0018" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit</failure></testcase><testcase classname="DevOpsBest" status="failed" name="K8s common labels usage" time=""><failure message="Remediation: Define applicable labels or use the exception mechanism to prevent further notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0077" type="Control">apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage</failure></testcase><testcase classname="DevOpsBest" status="failed" name="Resources memory limit and request" time=""><failure message="Remediation: Set the memory limit or use exception mechanism to avoid unnecessary notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0004" type="Control">apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress</failure></testcase><testcase classname="DevOpsBest" status="passed" name="Image pull policy on latest tag" time=""></testcase><testcase classname="DevOpsBest" status="failed" name="Resources CPU limit and request" time=""><failure message="Remediation: Set the CPU limit or use exception mechanism to avoid unnecessary notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0050" type="Control">apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: apache</failure></testcase><testcase classname="DevOpsBest" status="failed" name="Configured liveness probe" time=""><failure message="Remediation: Ensure Liveness probes are configured wherever possible.&#xA;More details: https://hub.armo.cloud/docs/c-0056" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit</failure></testcase></testsuite><testsuite name="MITRE" disabled="0" errors="0" failures="19" hostname="" id="1" skipped="" time="" timestamp="2022-03-03 09:35:56.095817332 +0000 UTC"><properties><property name="riskScore" value="19.82"></property></properties><testcase classname="MITRE" status="failed" name="Applications credentials in configuration files" time=""><failure message="Remediation: Use Kubernetes secrets or Key Management Systems to store credentials.&#xA;More details: https://hub.armo.cloud/docs/c-0012" type="Control">apiVersion: v1; kind: ConfigMap; name: bla&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook</failure></testcase><testcase classname="MITRE" status="passed" name="Access Kubernetes dashboard" time=""></testcase><testcase classname="MITRE" status="skipped" name="Access tiller endpoint" time=""><skipped message=""></skipped></testcase><testcase classname="MITRE" status="failed" name="CoreDNS poisoning" time=""><failure message="Remediation: You should follow the least privilege principle. Monitor and approve all the subjects allowed to modify the &#39;coredns&#39; configmap. It is also recommended to remove this permission from the users/service accounts used in the daily operations.&#xA;More details: https://hub.armo.cloud/docs/c-0037" type="Control">apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: generic-garbage-collector&#xA;apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: root-ca-cert-publisher</failure></testcase><testcase classname="MITRE" status="failed" name="Cluster-admin binding" time=""><failure message="Remediation: You should apply least privilege principle. Make sure cluster admin permissions are granted only when it is absolutely necessary. Don&#39;t use subjects with such high permissions for daily operations.&#xA;More details: https://hub.armo.cloud/docs/c-0035" type="Control">apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress</failure></testcase><testcase classname="MITRE" status="failed" name="Delete Kubernetes events" time=""><failure message="Remediation: You should follow the least privilege principle. Minimize the number of subjects who can delete Kubernetes events. Avoid using these subjects in the daily operations.&#xA;More details: https://hub.armo.cloud/docs/c-0031" type="Control">apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: namespace-controller&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: generic-garbage-collector</failure></testcase><testcase classname="MITRE" status="skipped" name="SSH server running inside container" time=""><skipped message=""></skipped></testcase><testcase classname="MITRE" status="failed" name="List Kubernetes secrets" time=""><failure message="Remediation: Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0015" type="Control">apiVersion: rbac.authorization.k8s.io; kind: User; namespace: ; name: system:kube-controller-manager&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: persistent-volume-binder&#xA;apiVersion: ; kind: ServiceAccount; name: resourcequota-controller&#xA;apiVersion: ; kind: ServiceAccount; name: namespace-controller&#xA;apiVersion: ; kind: ServiceAccount; name: kubescape-discovery&#xA;apiVersion: ; kind: ServiceAccount; name: bootstrap-signer&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: generic-garbage-collector&#xA;apiVersion: ; kind: ServiceAccount; name: expand-controller&#xA;apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: token-cleaner&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account</failure></testcase><testcase classname="MITRE" status="skipped" name="CVE-2021-25741 - Using symlink for arbitrary host file system access." time=""><skipped message=""></skipped></testcase><testcase classname="MITRE" status="failed" name="Malicious admission controller (validating)" time=""><failure message="Remediation: Ensure all the webhooks are necessary. Use exception mechanism to prevent repititive notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0036" type="Control">apiVersion: admissionregistration.k8s.io/v1; kind: ValidatingWebhookConfiguration; namespace: ; name: ca-validate-cfg</failure></testcase><testcase classname="MITRE" status="failed" name="Writable hostPath mount" time=""><failure message="Remediation: Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0045" type="Control">apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy</failure></testcase><testcase classname="MITRE" status="skipped" name="Exposed sensitive interfaces" time=""><skipped message=""></skipped></testcase><testcase classname="MITRE" status="failed" name="Secret/ETCD encryption enabled" time=""><failure message="Remediation: Turn on the etcd encryption in your cluster, for more see the vendor documentation.&#xA;More details: https://hub.armo.cloud/docs/c-0066" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="MITRE" status="skipped" name="Enforce Kubelet client TLS authentication" time=""><skipped message=""></skipped></testcase><testcase classname="MITRE" status="failed" name="Exec into container" time=""><failure message="Remediation: It is recommended to prohibit “kubectl exec” command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.&#xA;More details: https://hub.armo.cloud/docs/c-0002" type="Control">apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: default</failure></testcase><testcase classname="MITRE" status="failed" name="Mount service principal" time=""><failure message="Remediation: Refrain from using host path mount.&#xA;More details: https://hub.armo.cloud/docs/c-0020" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="MITRE" status="failed" name="Audit logs enabled" time=""><failure message="Remediation: Turn on audit logging for your cluster. Look at the vendor guidlines for more details&#xA;More details: https://hub.armo.cloud/docs/c-0067" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="MITRE" status="failed" name="Malicious admission controller (mutating)" time=""><failure message="Remediation: Ensure all the webhooks are necessary. Use exception mechanism to prevent repititive notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0039" type="Control">apiVersion: admissionregistration.k8s.io/v1; kind: MutatingWebhookConfiguration; namespace: ; name: ca-mutate-cfg</failure></testcase><testcase classname="MITRE" status="failed" name="CVE-2021-25742-nginx-ingress-snippet-annotation-vulnerability" time=""><failure message="Remediation: To mitigate this vulnerability: 1. Upgrade to a version that allows mitigation (&gt;= v0.49.1 or &gt;= v1.0.1), 2. Set allow-snippet-annotations to false in your ingress-nginx ConfigMap based on how you deploy ingress-nginx&#xA;More details: https://hub.armo.cloud/docs/c-0059" type="Control">apiVersion: apps/v1; kind: Deployment; name: nginx-ingress</failure></testcase><testcase classname="MITRE" status="skipped" name="Disable anonymous access to Kubelet service" time=""><skipped message=""></skipped></testcase><testcase classname="MITRE" status="skipped" name="Exposed dashboard" time=""><skipped message=""></skipped></testcase><testcase classname="MITRE" status="failed" name="PSP enabled" time=""><failure message="Remediation: Turn Pod Security Policies on in your cluster, if you use other admission controllers to control the behavior that PSP controls, exclude this control from your scans&#xA;More details: https://hub.armo.cloud/docs/c-0068" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="MITRE" status="failed" name="Data Destruction" time=""><failure message="Remediation: You should follow the least privilege principle and minimize the number of subjects that can delete resources.&#xA;More details: https://hub.armo.cloud/docs/c-0007" type="Control">apiVersion: rbac.authorization.k8s.io; kind: User; namespace: ; name: system:kube-scheduler&#xA;apiVersion: ; kind: ServiceAccount; name: job-controller&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: rbac.authorization.k8s.io; kind: User; namespace: ; name: system:kube-controller-manager&#xA;apiVersion: ; kind: ServiceAccount; name: node-controller&#xA;apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: replicaset-controller&#xA;apiVersion: ; kind: ServiceAccount; name: persistent-volume-binder&#xA;apiVersion: ; kind: ServiceAccount; name: generic-garbage-collector&#xA;apiVersion: ; kind: ServiceAccount; name: deployment-controller&#xA;apiVersion: ; kind: ServiceAccount; name: daemon-set-controller&#xA;apiVersion: ; kind: ServiceAccount; name: ttl-after-finished-controller&#xA;apiVersion: ; kind: ServiceAccount; name: namespace-controller&#xA;apiVersion: ; kind: ServiceAccount; name: replication-controller&#xA;apiVersion: ; kind: ServiceAccount; name: token-cleaner&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: ; kind: ServiceAccount; name: cronjob-controller&#xA;apiVersion: ; kind: ServiceAccount; name: statefulset-controller&#xA;apiVersion: ; kind: ServiceAccount; name: pod-garbage-collector</failure></testcase><testcase classname="MITRE" status="failed" name="HostPath mount" time=""><failure message="Remediation: Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0048" type="Control">apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket</failure></testcase><testcase classname="MITRE" status="skipped" name="Kubernetes CronJob" time=""><skipped message=""></skipped></testcase><testcase classname="MITRE" status="failed" name="Access container service account" time=""><failure message="Remediation: Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary PODs have SA token mounted into them.&#xA;More details: https://hub.armo.cloud/docs/c-0053" type="Control">apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: replicaset-controller&#xA;apiVersion: ; kind: ServiceAccount; name: statefulset-controller&#xA;apiVersion: ; kind: ServiceAccount; name: replication-controller&#xA;apiVersion: ; kind: ServiceAccount; name: coredns&#xA;apiVersion: ; kind: ServiceAccount; name: daemon-set-controller&#xA;apiVersion: ; kind: ServiceAccount; name: endpoint-controller&#xA;apiVersion: ; kind: ServiceAccount; name: pod-garbage-collector&#xA;apiVersion: ; kind: ServiceAccount; name: service-account-controller&#xA;apiVersion: ; kind: ServiceAccount; name: kube-proxy&#xA;apiVersion: ; kind: ServiceAccount; name: ttl-controller&#xA;apiVersion: ; kind: ServiceAccount; name: token-cleaner&#xA;apiVersion: ; kind: ServiceAccount; name: pvc-protection-controller&#xA;apiVersion: ; kind: ServiceAccount; name: certificate-controller&#xA;apiVersion: ; kind: ServiceAccount; name: root-ca-cert-publisher&#xA;apiVersion: ; kind: ServiceAccount; name: pv-protection-controller&#xA;apiVersion: ; kind: ServiceAccount; name: job-controller&#xA;apiVersion: ; kind: ServiceAccount; name: endpointslicemirroring-controller&#xA;apiVersion: ; kind: ServiceAccount; name: clusterrole-aggregation-controller&#xA;apiVersion: ; kind: ServiceAccount; name: expand-controller&#xA;apiVersion: ; kind: ServiceAccount; name: ephemeral-volume-controller&#xA;apiVersion: ; kind: ServiceAccount; name: disruption-controller&#xA;apiVersion: ; kind: ServiceAccount; name: service-controller&#xA;apiVersion: ; kind: ServiceAccount; name: endpointslice-controller&#xA;apiVersion: ; kind: ServiceAccount; name: storage-provisioner&#xA;apiVersion: ; kind: ServiceAccount; name: deployment-controller&#xA;apiVersion: ; kind: ServiceAccount; name: bootstrap-signer&#xA;apiVersion: ; kind: ServiceAccount; name: namespace-controller&#xA;apiVersion: ; kind: ServiceAccount; name: persistent-volume-binder&#xA;apiVersion: ; kind: ServiceAccount; name: attachdetach-controller&#xA;apiVersion: ; kind: ServiceAccount; name: generic-garbage-collector&#xA;apiVersion: ; kind: ServiceAccount; name: cronjob-controller&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: ; kind: ServiceAccount; name: horizontal-pod-autoscaler&#xA;apiVersion: ; kind: ServiceAccount; name: ttl-after-finished-controller&#xA;apiVersion: ; kind: ServiceAccount; name: node-controller&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: resourcequota-controller</failure></testcase><testcase classname="MITRE" status="failed" name="Cluster internal networking" time=""><failure message="Remediation: Define Kubernetes network policies or use alternative products to protect cluster network.&#xA;More details: https://hub.armo.cloud/docs/c-0054" type="Control">apiVersion: v1; kind: Namespace; namespace: ; name: kube-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: default&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: armo-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-node-lease&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-public&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: system-test&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: nginx-ingress&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: cyberarmor-system</failure></testcase><testcase classname="MITRE" status="failed" name="Privileged container" time=""><failure message="Remediation: Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0057" type="Control">apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy</failure></testcase></testsuite><testsuite name="ArmoBest" disabled="0" errors="0" failures="25" hostname="" id="2" skipped="" time="" timestamp="2022-03-03 09:35:56.095817332 +0000 UTC"><properties><property name="riskScore" value="29.23"></property></properties><testcase classname="ArmoBest" status="passed" name="Container hostPort" time=""></testcase><testcase classname="ArmoBest" status="skipped" name="Exposed dashboard" time=""><skipped message=""></skipped></testcase><testcase classname="ArmoBest" status="failed" name="Portforwarding privileges" time=""><failure message="Remediation: It is recommended to prohibit “kubectl portforward” command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.&#xA;More details: https://hub.armo.cloud/docs/c-0063" type="Control">apiVersion: ; kind: ServiceAccount; name: namespace-controller&#xA;apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: kubescape-discovery&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: generic-garbage-collector&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account</failure></testcase><testcase classname="ArmoBest" status="failed" name="HostNetwork access" time=""><failure message="Remediation: Only connect PODs to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those PODs that must have access to host network by design.&#xA;More details: https://hub.armo.cloud/docs/c-0041" type="Control">apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox</failure></testcase><testcase classname="ArmoBest" status="failed" name="Cluster internal networking" time=""><failure message="Remediation: Define Kubernetes network policies or use alternative products to protect cluster network.&#xA;More details: https://hub.armo.cloud/docs/c-0054" type="Control">apiVersion: v1; kind: Namespace; namespace: ; name: system-test&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: nginx-ingress&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: cyberarmor-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: default&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: armo-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-node-lease&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-public</failure></testcase><testcase classname="ArmoBest" status="failed" name="Ingress and Egress blocked" time=""><failure message="Remediation: Define a network policy that restricts ingress and egress connections.&#xA;More details: https://hub.armo.cloud/docs/c-0030" type="Control">apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner</failure></testcase><testcase classname="ArmoBest" status="failed" name="Audit logs enabled" time=""><failure message="Remediation: Turn on audit logging for your cluster. Look at the vendor guidlines for more details&#xA;More details: https://hub.armo.cloud/docs/c-0067" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="ArmoBest" status="failed" name="Allow privilege escalation" time=""><failure message="Remediation: If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.&#xA;More details: https://hub.armo.cloud/docs/c-0016" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner</failure></testcase><testcase classname="ArmoBest" status="passed" name="Control plane hardening" time=""></testcase><testcase classname="ArmoBest" status="passed" name="Host PID/IPC privileges" time=""></testcase><testcase classname="ArmoBest" status="failed" name="Privileged container" time=""><failure message="Remediation: Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0057" type="Control">apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy</failure></testcase><testcase classname="ArmoBest" status="skipped" name="CVE-2021-25741 - Using symlink for arbitrary host file system access." time=""><skipped message=""></skipped></testcase><testcase classname="ArmoBest" status="failed" name="Allowed hostPath" time=""><failure message="Remediation: Refrain from using host path mount.&#xA;More details: https://hub.armo.cloud/docs/c-0006" type="Control">apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox</failure></testcase><testcase classname="ArmoBest" status="failed" name="Namespace without service accounts" time=""><failure message="Remediation: Assign explicit service account to every namespace. Reduce RBAC capabilities of such service account to a minimum. Don&#39;t allow even read permissions unless it is absolutely necessary.&#xA;More details: https://hub.armo.cloud/docs/c-0060" type="Control">apiVersion: v1; kind: Namespace; namespace: ; name: kube-node-lease&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: system-test&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-public&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: armo-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: default</failure></testcase><testcase classname="ArmoBest" status="failed" name="Immutable container filesystem" time=""><failure message="Remediation: Set the filesystem of the container to read-only when possible (POD securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.&#xA;More details: https://hub.armo.cloud/docs/c-0017" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook</failure></testcase><testcase classname="ArmoBest" status="failed" name="PSP enabled" time=""><failure message="Remediation: Turn Pod Security Policies on in your cluster, if you use other admission controllers to control the behavior that PSP controls, exclude this control from your scans&#xA;More details: https://hub.armo.cloud/docs/c-0068" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="ArmoBest" status="failed" name="Secret/ETCD encryption enabled" time=""><failure message="Remediation: Turn on the etcd encryption in your cluster, for more see the vendor documentation.&#xA;More details: https://hub.armo.cloud/docs/c-0066" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="ArmoBest" status="failed" name="Resource policies" time=""><failure message="Remediation: Define LimitRange and Resource Limits in the namespace or in the deployment/POD yamls.&#xA;More details: https://hub.armo.cloud/docs/c-0009" type="Control">apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner</failure></testcase><testcase classname="ArmoBest" status="passed" name="Insecure capabilities" time=""></testcase><testcase classname="ArmoBest" status="passed" name="Pods in default namespace" time=""></testcase><testcase classname="ArmoBest" status="failed" name="Images from allowed registry" time=""><failure message="Remediation: You should enable all trusted repositories in the parameters of this control.&#xA;More details: https://hub.armo.cloud/docs/c-0078" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage</failure></testcase><testcase classname="ArmoBest" status="failed" name="Exec into container" time=""><failure message="Remediation: It is recommended to prohibit “kubectl exec” command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.&#xA;More details: https://hub.armo.cloud/docs/c-0002" type="Control">apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: default</failure></testcase><testcase classname="ArmoBest" status="failed" name="CVE-2022-0185-linux-kernel-container-escape" time=""><failure message="Remediation: Patch Linux kernel version to 5.16.2 or above&#xA;More details: https://hub.armo.cloud/docs/c-0079" type="Control">apiVersion: v1; kind: Node; namespace: ; name: david-virtualbox</failure></testcase><testcase classname="ArmoBest" status="failed" name="CVE-2021-25742-nginx-ingress-snippet-annotation-vulnerability" time=""><failure message="Remediation: To mitigate this vulnerability: 1. Upgrade to a version that allows mitigation (&gt;= v0.49.1 or &gt;= v1.0.1), 2. Set allow-snippet-annotations to false in your ingress-nginx ConfigMap based on how you deploy ingress-nginx&#xA;More details: https://hub.armo.cloud/docs/c-0059" type="Control">apiVersion: apps/v1; kind: Deployment; name: nginx-ingress</failure></testcase><testcase classname="ArmoBest" status="failed" name="Cluster-admin binding" time=""><failure message="Remediation: You should apply least privilege principle. Make sure cluster admin permissions are granted only when it is absolutely necessary. Don&#39;t use subjects with such high permissions for daily operations.&#xA;More details: https://hub.armo.cloud/docs/c-0035" type="Control">apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account</failure></testcase><testcase classname="ArmoBest" status="skipped" name="Disable anonymous access to Kubelet service" time=""><skipped message=""></skipped></testcase><testcase classname="ArmoBest" status="skipped" name="Enforce Kubelet client TLS authentication" time=""><skipped message=""></skipped></testcase><testcase classname="ArmoBest" status="failed" name="Forbidden Container Registries" time=""><failure message="Remediation: Limit the registries from which you pull container images from&#xA;More details: https://hub.armo.cloud/docs/c-0001" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: apache</failure></testcase><testcase classname="ArmoBest" status="failed" name="Linux hardening" time=""><failure message="Remediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.&#xA;More details: https://hub.armo.cloud/docs/c-0055" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: apache</failure></testcase><testcase classname="ArmoBest" status="failed" name="Network mapping" time=""><failure message="Remediation: Define network policies or use similar network protection mechanisms.&#xA;More details: https://hub.armo.cloud/docs/c-0049" type="Control">apiVersion: v1; kind: Namespace; namespace: ; name: kube-public&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: system-test&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: nginx-ingress&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: default&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: armo-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: cyberarmor-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-node-lease</failure></testcase><testcase classname="ArmoBest" status="passed" name="Sudo in container entrypoint" time=""></testcase><testcase classname="ArmoBest" status="failed" name="No impersonation" time=""><failure message="Remediation: Either remove the impersonate verb from the role where it was found or make sure that this role is not bound to users, groups or service accounts used for ongoing cluster operations. If necessary, bind this role to a subject only for specific needs for limited time period.&#xA;More details: https://hub.armo.cloud/docs/c-0065" type="Control">apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters</failure></testcase><testcase classname="ArmoBest" status="failed" name="Applications credentials in configuration files" time=""><failure message="Remediation: Use Kubernetes secrets or Key Management Systems to store credentials.&#xA;More details: https://hub.armo.cloud/docs/c-0012" type="Control">apiVersion: v1; kind: ConfigMap; name: bla&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook</failure></testcase><testcase classname="ArmoBest" status="failed" name="Automatic mapping of service account" time=""><failure message="Remediation: Disable automatic mounting of service account tokens to PODs either at the service account level or at the individual POD level, by specifying the automountServiceAccountToken: false. Note that POD level takes precedence.&#xA;More details: https://hub.armo.cloud/docs/c-0034" type="Control">apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: ServiceAccount; name: replicaset-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: pv-protection-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: cronjob-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: bootstrap-signer&#xA;apiVersion: v1; kind: ServiceAccount; name: endpointslice-controller&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: ServiceAccount; name: expand-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: default&#xA;apiVersion: v1; kind: ServiceAccount; name: coredns&#xA;apiVersion: v1; kind: ServiceAccount; name: horizontal-pod-autoscaler&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: ServiceAccount; name: job-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: resourcequota-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: attachdetach-controller&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: v1; kind: ServiceAccount; name: ca-audit&#xA;apiVersion: v1; kind: ServiceAccount; name: ttl-after-finished-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: token-cleaner&#xA;apiVersion: v1; kind: ServiceAccount; name: daemon-set-controller&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: v1; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: v1; kind: ServiceAccount; name: disruption-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: service-account-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: endpoint-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: endpointslicemirroring-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: statefulset-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: certificate-controller&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: v1; kind: ServiceAccount; name: pod-garbage-collector&#xA;apiVersion: v1; kind: ServiceAccount; name: service-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: replication-controller&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: ServiceAccount; name: clusterrole-aggregation-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: deployment-controller&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: v1; kind: ServiceAccount; name: ephemeral-volume-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: node-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: persistent-volume-binder&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: v1; kind: ServiceAccount; name: root-ca-cert-publisher&#xA;apiVersion: v1; kind: ServiceAccount; name: generic-garbage-collector&#xA;apiVersion: v1; kind: ServiceAccount; name: namespace-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: v1; kind: ServiceAccount; name: pvc-protection-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: ttl-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: storage-provisioner</failure></testcase><testcase classname="ArmoBest" status="failed" name="Non-root containers" time=""><failure message="Remediation: If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.&#xA;More details: https://hub.armo.cloud/docs/c-0013" type="Control">apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan</failure></testcase></testsuite><testsuite name="NSA" disabled="0" errors="0" failures="18" hostname="" id="3" skipped="" time="" timestamp="2022-03-03 09:35:56.095817332 +0000 UTC"><properties><property name="riskScore" value="35.25"></property></properties><testcase classname="NSA" status="failed" name="Allow privilege escalation" time=""><failure message="Remediation: If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.&#xA;More details: https://hub.armo.cloud/docs/c-0016" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit</failure></testcase><testcase classname="NSA" status="failed" name="Audit logs enabled" time=""><failure message="Remediation: Turn on audit logging for your cluster. Look at the vendor guidlines for more details&#xA;More details: https://hub.armo.cloud/docs/c-0067" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="NSA" status="failed" name="Ingress and Egress blocked" time=""><failure message="Remediation: Define a network policy that restricts ingress and egress connections.&#xA;More details: https://hub.armo.cloud/docs/c-0030" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket</failure></testcase><testcase classname="NSA" status="failed" name="CVE-2021-25742-nginx-ingress-snippet-annotation-vulnerability" time=""><failure message="Remediation: To mitigate this vulnerability: 1. Upgrade to a version that allows mitigation (&gt;= v0.49.1 or &gt;= v1.0.1), 2. Set allow-snippet-annotations to false in your ingress-nginx ConfigMap based on how you deploy ingress-nginx&#xA;More details: https://hub.armo.cloud/docs/c-0059" type="Control">apiVersion: apps/v1; kind: Deployment; name: nginx-ingress</failure></testcase><testcase classname="NSA" status="failed" name="Automatic mapping of service account" time=""><failure message="Remediation: Disable automatic mounting of service account tokens to PODs either at the service account level or at the individual POD level, by specifying the automountServiceAccountToken: false. Note that POD level takes precedence.&#xA;More details: https://hub.armo.cloud/docs/c-0034" type="Control">apiVersion: v1; kind: ServiceAccount; name: disruption-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: statefulset-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: deployment-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: v1; kind: ServiceAccount; name: endpointslice-controller&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: ServiceAccount; name: root-ca-cert-publisher&#xA;apiVersion: v1; kind: ServiceAccount; name: daemon-set-controller&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: v1; kind: ServiceAccount; name: horizontal-pod-autoscaler&#xA;apiVersion: v1; kind: ServiceAccount; name: default&#xA;apiVersion: v1; kind: ServiceAccount; name: job-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: clusterrole-aggregation-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: pod-garbage-collector&#xA;apiVersion: v1; kind: ServiceAccount; name: service-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: replication-controller&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: v1; kind: ServiceAccount; name: token-cleaner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: ServiceAccount; name: cronjob-controller&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: v1; kind: ServiceAccount; name: ttl-after-finished-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: service-account-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: attachdetach-controller&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: ServiceAccount; name: resourcequota-controller&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: v1; kind: ServiceAccount; name: ephemeral-volume-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: generic-garbage-collector&#xA;apiVersion: v1; kind: ServiceAccount; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: v1; kind: ServiceAccount; name: bootstrap-signer&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: v1; kind: ServiceAccount; name: pv-protection-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: ca-audit&#xA;apiVersion: v1; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: v1; kind: ServiceAccount; name: coredns&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: v1; kind: ServiceAccount; name: pvc-protection-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: node-controller&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: ServiceAccount; name: namespace-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: certificate-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: endpoint-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: expand-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: kube-proxy&#xA;apiVersion: v1; kind: ServiceAccount; name: persistent-volume-binder&#xA;apiVersion: v1; kind: ServiceAccount; name: endpointslicemirroring-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: ttl-controller&#xA;apiVersion: v1; kind: ServiceAccount; name: replicaset-controller&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="NSA" status="failed" name="Cluster-admin binding" time=""><failure message="Remediation: You should apply least privilege principle. Make sure cluster admin permissions are granted only when it is absolutely necessary. Don&#39;t use subjects with such high permissions for daily operations.&#xA;More details: https://hub.armo.cloud/docs/c-0035" type="Control">apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: default&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account</failure></testcase><testcase classname="NSA" status="passed" name="Host PID/IPC privileges" time=""></testcase><testcase classname="NSA" status="passed" name="Insecure capabilities" time=""></testcase><testcase classname="NSA" status="skipped" name="Disable anonymous access to Kubelet service" time=""><skipped message=""></skipped></testcase><testcase classname="NSA" status="skipped" name="Enforce Kubelet client TLS authentication" time=""><skipped message=""></skipped></testcase><testcase classname="NSA" status="failed" name="Non-root containers" time=""><failure message="Remediation: If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.&#xA;More details: https://hub.armo.cloud/docs/c-0013" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: apache</failure></testcase><testcase classname="NSA" status="failed" name="Applications credentials in configuration files" time=""><failure message="Remediation: Use Kubernetes secrets or Key Management Systems to store credentials.&#xA;More details: https://hub.armo.cloud/docs/c-0012" type="Control">apiVersion: v1; kind: ConfigMap; name: bla&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook</failure></testcase><testcase classname="NSA" status="failed" name="Privileged container" time=""><failure message="Remediation: Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.&#xA;More details: https://hub.armo.cloud/docs/c-0057" type="Control">apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy</failure></testcase><testcase classname="NSA" status="failed" name="Immutable container filesystem" time=""><failure message="Remediation: Set the filesystem of the container to read-only when possible (POD securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.&#xA;More details: https://hub.armo.cloud/docs/c-0017" type="Control">apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture</failure></testcase><testcase classname="NSA" status="failed" name="PSP enabled" time=""><failure message="Remediation: Turn Pod Security Policies on in your cluster, if you use other admission controllers to control the behavior that PSP controls, exclude this control from your scans&#xA;More details: https://hub.armo.cloud/docs/c-0068" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase><testcase classname="NSA" status="passed" name="Control plane hardening" time=""></testcase><testcase classname="NSA" status="skipped" name="CVE-2021-25741 - Using symlink for arbitrary host file system access." time=""><skipped message=""></skipped></testcase><testcase classname="NSA" status="failed" name="Linux hardening" time=""><failure message="Remediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.&#xA;More details: https://hub.armo.cloud/docs/c-0055" type="Control">apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-dashboard-aggregator&#xA;apiVersion: apps/v1; kind: Deployment; name: apache&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-ocimage&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-notification-server&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-oracle&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-vuln-scan&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-audit&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-rbac&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-posture</failure></testcase><testcase classname="NSA" status="failed" name="HostNetwork access" time=""><failure message="Remediation: Only connect PODs to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those PODs that must have access to host network by design.&#xA;More details: https://hub.armo.cloud/docs/c-0041" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox</failure></testcase><testcase classname="NSA" status="failed" name="Cluster internal networking" time=""><failure message="Remediation: Define Kubernetes network policies or use alternative products to protect cluster network.&#xA;More details: https://hub.armo.cloud/docs/c-0054" type="Control">apiVersion: v1; kind: Namespace; namespace: ; name: kube-node-lease&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-public&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: system-test&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: nginx-ingress&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: cyberarmor-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: kube-system&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: default&#xA;apiVersion: v1; kind: Namespace; namespace: ; name: armo-system</failure></testcase><testcase classname="NSA" status="failed" name="Resource policies" time=""><failure message="Remediation: Define LimitRange and Resource Limits in the namespace or in the deployment/POD yamls.&#xA;More details: https://hub.armo.cloud/docs/c-0009" type="Control">apiVersion: v1; kind: Pod; name: kube-scheduler-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: nginx-ingress&#xA;apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox&#xA;apiVersion: apps/v1; kind: Deployment; name: coredns&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: apache</failure></testcase><testcase classname="NSA" status="failed" name="Allowed hostPath" time=""><failure message="Remediation: Refrain from using host path mount.&#xA;More details: https://hub.armo.cloud/docs/c-0006" type="Control">apiVersion: v1; kind: Pod; name: storage-provisioner&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-websocket&#xA;apiVersion: apps/v1; kind: Deployment; name: ca-webhook&#xA;apiVersion: v1; kind: Pod; name: etcd-david-virtualbox&#xA;apiVersion: v1; kind: Pod; name: kube-controller-manager-david-virtualbox&#xA;apiVersion: apps/v1; kind: DaemonSet; name: kube-proxy</failure></testcase><testcase classname="NSA" status="failed" name="Exec into container" time=""><failure message="Remediation: It is recommended to prohibit “kubectl exec” command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.&#xA;More details: https://hub.armo.cloud/docs/c-0002" type="Control">apiVersion: rbac.authorization.k8s.io; kind: Group; namespace: ; name: system:masters&#xA;apiVersion: ; kind: ServiceAccount; name: ca-controller-service-account&#xA;apiVersion: ; kind: ServiceAccount; name: nginx-ingress&#xA;apiVersion: ; kind: ServiceAccount; name: default</failure></testcase><testcase classname="NSA" status="passed" name="Container hostPort" time=""></testcase><testcase classname="NSA" status="skipped" name="Exposed dashboard" time=""><skipped message=""></skipped></testcase><testcase classname="NSA" status="failed" name="Secret/ETCD encryption enabled" time=""><failure message="Remediation: Turn on the etcd encryption in your cluster, for more see the vendor documentation.&#xA;More details: https://hub.armo.cloud/docs/c-0066" type="Control">apiVersion: v1; kind: Pod; name: kube-apiserver-david-virtualbox</failure></testcase></testsuite></testsuites>